using Microsoft.AspNetCore.Mvc;
using Microsoft.OpenApi.Models;
using Saras.eMarking.Domain.Configuration;
using Saras.eMarking.Domain.Entities;
using Saras.eMarking.Domain.Entities.Security;
using Saras.eMarking.Infrastructure;
using Saras.eMarking.IOC;
using Serilog;
using System.Reflection;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container. 
builder.Services.AddControllers();

#region Swagger docs
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "Saras.eMarking.OutboundApi", Version = "v1" });

    //Locate the XML file being generated by ASP.NET...
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

    //... and tell Swagger to use those XML comments.
    c.IncludeXmlComments(xmlPath);
});
#endregion

#region CORS 

builder.Services.AddCors(b => b.AddPolicy("AllowAny", p => p
   .AllowAnyHeader()
   .AllowAnyMethod()
   .SetIsOriginAllowed(isOriginAllowed: _ => true)
   .AllowCredentials()
   .SetPreflightMaxAge(TimeSpan.FromMinutes(5))));
#endregion

#region ApiVersion
builder.Services.AddApiVersioning(config =>
{
    config.ReportApiVersions = true;
    config.AssumeDefaultVersionWhenUnspecified = true;
    config.DefaultApiVersion = new ApiVersion(1, 0);
});
#endregion 

#region Configurations
string? environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
if (string.IsNullOrWhiteSpace(environment))
    environment = "Development";

var config = new ConfigurationBuilder()
.SetBasePath(System.IO.Directory.GetCurrentDirectory())
.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
.AddEnvironmentVariables()
.AddCommandLine(args)
    .Build();

var options = AppOptions.ReadFromConfiguration(config);
#endregion

builder.WebHost.UseIISIntegration();
builder.WebHost.UseContentRoot(Directory.GetCurrentDirectory());

#region Dependencies
builder.Services.AddInfrastructure(builder.Configuration);
builder.Services.AddSingleton<ProjectConfiguration>();
DependencyContainer.RegisterService(builder.Services);
builder.Services.AddSingleton<IAppCache, Saras.eMarking.Domain.Entities.AppCache>();
builder.Services.AddAppOptions(options);
#endregion


#region Logger
builder.Logging.ClearProviders();
builder.Logging.AddSerilog();
#endregion

var app = builder.Build();

// Configure the HTTP request pipeline.

app.UseSwagger();
app.UseSwaggerUI();

app.UseStatusCodePages();
app.UseExceptionHandler("/Error");
app.UseHsts();

app.UseDefaultFiles();
app.UseStaticFiles();

app.UseRouting();
app.UseCors("AllowAny");
app.UseHttpsRedirection();

app.UseAuthorization();
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers();
});
app.Run();
