using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Security.Cryptography;
using System.Xml;

namespace LicensingAndTransfer.ServiceImplementation
{
    /// <summary>
    /// Summary description for SecuirtyManager.
    /// </summary>
    public class SecurityManager
    {
        private RSAParameters RSAKeyInfo;
        private static RSACryptoServiceProvider RSA = null;
        private string modStr = "";
        private string expStr = "";
        private static string PUBLIC_KEY;

        /// <summary>
        /// Reads the Public key file and Loads the RSAParameters with the 
        /// Modulous and Exponent data.
        /// </summary>
        public SecurityManager()
        {
            PUBLIC_KEY = "c:\\netpublic.key"; //Generated by Java Program
            RSAKeyInfo = new RSAParameters();
            RSA = new RSACryptoServiceProvider(2048);

            readKey();
        }
        /// <summary>
        /// Reads the key from the XML formatted file.
        /// </summary>
        private void readKey()
        {
            // read the XML formated public key 
            try
            {

                XmlTextReader reader = new XmlTextReader(PUBLIC_KEY);
                while (reader.Read())
                {
                    if (reader.NodeType == XmlNodeType.Element)
                    {
                        if (reader.Name == "Modulus")
                        {
                            reader.Read();
                            modStr = reader.Value;
                        }
                        else if (reader.Name == "Exponent")
                        {
                            reader.Read();
                            expStr = reader.Value;
                        }
                    }
                }
                if (modStr.Equals("") || expStr.Equals(""))
                {
                    //throw exception
                    throw new Exception("Invalid public key");
                }
                RSAKeyInfo.Modulus = Convert.FromBase64String(modStr);
                RSAKeyInfo.Exponent = Convert.FromBase64String(expStr);
                RSA.ImportParameters(RSAKeyInfo);
            }
            catch (Exception e)
            {
                throw new Exception("Invalid Public Key.");
            }
        }
        /// <summary>
        /// Verifies the signature for a given data.
        /// </summary>
        /// <param name="signature">Signature data in Base64</param>
        /// <param name="signedData">Original data in BASE64</param>
        /// <returns>True if signature is valid else False</returns>
        public bool verifySignature(string signature, string signedData)
        {
            byte[] sign = Convert.FromBase64String(signature);
            return verifySignature(sign, signedData);
        }
        /// <summary>
        /// Verifies the signature for a given data.
        /// </summary>
        /// <param name="signature">The signature </param>
        /// <param name="signedData">Original data in Base64</param>
        /// <returns></returns>
        public bool verifySignature(byte[] signature, string signedData)
        {


            byte[] hash = Convert.FromBase64String(signedData);
            try
            {
                if (RSA.VerifyData(hash, "SHA1", signature))
                {
                    //Console.WriteLine("The signature is valid.");
                    return true;
                }
                else
                {
                    //Console.WriteLine("The signature is not valid.");
                    return false;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }
        }
        /// <summary>
        /// Decrypts the data. from Base64 string
        /// </summary>
        /// <param name="encrypted">Base64EncodedData</param>
        /// <returns>Data</returns>
        public static string decryptData(string encrypted)
        {
            return Encoding.GetEncoding("windows-1256").GetString(Convert.FromBase64String(encrypted));
        }

        public string readFile(string file)
        {
            string finalStr = "";
            try
            {
                // Create an instance of StreamReader to read from a file.
                // The using statement also closes the StreamReader.
                using (StreamReader sr = new StreamReader(file))
                {
                    String line;
                    // Read and display lines from the file until the end of 
                    // the file is reached.
                    while ((line = sr.ReadLine()) != null)
                    {
                        //Console.WriteLine(line);	
                        finalStr = finalStr + line;
                    }
                    return finalStr;
                }
            }
            catch (Exception e)
            {
                // Let the user know what went wrong.
                Console.WriteLine("The file could not be read:");
                Console.WriteLine(e.Message);
            }
            return null;
        }

        
    }
}
